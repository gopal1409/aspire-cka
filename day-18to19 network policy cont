####problem we have is that we cannot curl the other pod using naming convention
   kubectl exec backend -- curl frontend
 kubectl exec frontend -- curl backend
####how to resolve the naming convention error
vi deny.yml
###we will all port 53 or enable dns service in my deny rule as an exception
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny
  namespace: default
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
  egress:
  - ports:
      - port: 53
        protocol: TCP
      - port: 53
        protocol: UDP
######apply the deny rule
kubectl apply -f deny.yml
 kubectl exec frontend -- curl backend
####backend to frontend communication
vi b1-ingress.yml
######################
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backend-ingress-network-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      run: frontend
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              run: backend
#####apply the policy
kubectl apply -f b1-ingress.yml
######egress routing for back from
vi b1-egress.yml
#################################
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backend-egress-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      run: backend
  policyTypes:
    - Egress
  egress:
    - to:
        - podSelector:
            matchLabels:
              run: frontend
#####apply the policy
kubectl apply -f b1-egress.yml
###verify the backend to frontend communciation
kubectl get networkpolicy
 kubectl exec backend -- curl frontend

