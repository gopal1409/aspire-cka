Withough network polucy by default every pod can access every pod. so pod are not isolated from each other
when we talk about network policy who provide network in k8s. the service
###lets create two pod frontend and backend
 1381  kubectl run frontend --image=nginx
 1382  kubectl run backend --image=nginx
 1383  kubectl get pod
####lets creat the service for frontend and backend
1386  kubectl expose pod frontend --port 80
 1387  kubectl expose pod backend --port 80
 1388  kubectl get svc
###lets verify they are talking to each other or not
 1389  kubectl exec frontend -- curl backend
 1390  kubectl exec backend -- curl frontend
####lets create a default deny policy
vi deny.yml
#####add the deny policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny
  namespace: default
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
#####apply it
kubectl apply -f deny.yml
###lets verify the policy
 1397  kubectl get networkpolicy
 1398  kubectl exec frontend -- curl backend
 1399  kubectl exec backend -- curl frontend
####lets create teh egress rule from frontend to backend
vi front.yml
######
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: frontend-network-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      run: frontend
  policyTypes:
    - Egress
  egress:
    - to:
        - podSelector:
            matchLabels:
              run: backend
####apply it and verify it
 kubectl apply -f front.yml
 kubectl get networkpolicy
####using curl command lets check the outgoing traffic is working or not
 1410  kubectl exec frontend -- curl backend
####get the backend ip address and check the same both the way it is not working
 1411  kubectl get pod -o wide
 1412  kubectl exec frontend -- curl 192.168.1.25



